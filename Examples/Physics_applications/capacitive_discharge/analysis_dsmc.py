#!/usr/bin/env python3

# 2023 TAE Technologies

import os
import sys

import numpy as np

sys.path.append('../../../../warpx/Regression/Checksum/')

import checksumAPI

# this will be the name of the plot file
fn = sys.argv[1]
test_name = os.path.split(os.getcwd())[1]

my_check = checksumAPI.evaluate_checksum(test_name, fn, do_particles=True)

ref_density = np.array([
    1.27957355e+14, 2.23554080e+14, 2.55373436e+14, 2.55659492e+14,
    2.55814670e+14, 2.55818418e+14, 2.55811882e+14, 2.55742272e+14,
    2.55912888e+14, 2.56086072e+14, 2.55944486e+14, 2.55830183e+14,
    2.55909337e+14, 2.56008609e+14, 2.56205930e+14, 2.56421940e+14,
    2.56369990e+14, 2.56151020e+14, 2.55925823e+14, 2.55924941e+14,
    2.56067211e+14, 2.56264104e+14, 2.56435035e+14, 2.56543804e+14,
    2.56715146e+14, 2.56639305e+14, 2.56509438e+14, 2.56478881e+14,
    2.56406748e+14, 2.56194832e+14, 2.56126186e+14, 2.56442221e+14,
    2.56603784e+14, 2.56592554e+14, 2.56475838e+14, 2.56304135e+14,
    2.56310993e+14, 2.56298883e+14, 2.56386742e+14, 2.56555670e+14,
    2.56588013e+14, 2.56851444e+14, 2.56928531e+14, 2.56637559e+14,
    2.56678652e+14, 2.56827322e+14, 2.56630197e+14, 2.56295404e+14,
    2.56285079e+14, 2.56558116e+14, 2.56676094e+14, 2.56577780e+14,
    2.56599749e+14, 2.56540500e+14, 2.56292984e+14, 2.56230350e+14,
    2.56363607e+14, 2.56553909e+14, 2.56501054e+14, 2.56249684e+14,
    2.56280268e+14, 2.56558208e+14, 2.56437837e+14, 2.56152650e+14,
    2.56143349e+14, 2.56067330e+14, 2.56020624e+14, 2.56039223e+14,
    2.56306096e+14, 2.56693084e+14, 2.56649778e+14, 2.56589778e+14,
    2.56594097e+14, 2.56368788e+14, 2.56290090e+14, 2.56420940e+14,
    2.56581419e+14, 2.56642649e+14, 2.56426887e+14, 2.56360122e+14,
    2.56573424e+14, 2.56679138e+14, 2.56488767e+14, 2.56217444e+14,
    2.56353118e+14, 2.56640765e+14, 2.56809490e+14, 2.56933226e+14,
    2.56633538e+14, 2.56203430e+14, 2.56202958e+14, 2.56564020e+14,
    2.56816347e+14, 2.56709830e+14, 2.56557382e+14, 2.56573904e+14,
    2.56745541e+14, 2.56784430e+14, 2.56580054e+14, 2.56210130e+14,
    2.56271415e+14, 2.56821160e+14, 2.56703292e+14, 2.56169296e+14,
    2.56166549e+14, 2.56467777e+14, 2.56573240e+14, 2.56437594e+14,
    2.56253730e+14, 2.56176123e+14, 2.56351125e+14, 2.56569916e+14,
    2.56761101e+14, 2.56891411e+14, 2.56628312e+14, 2.56180062e+14,
    2.56063564e+14, 2.56189728e+14, 2.56609454e+14, 2.57263643e+14,
    2.57097673e+14, 2.56666761e+14, 2.56622585e+14, 2.56432378e+14,
    2.56386718e+14, 2.56734491e+14, 2.57042448e+14, 2.24471147e+14,
    1.27720853e+14
])

density_data = np.load( 'ion_density_case_1.npy' )
print(repr(density_data))
assert np.allclose(density_data, ref_density)
