#!/usr/bin/env python3

# 2023 TAE Technologies

import os
import sys

import numpy as np

sys.path.append('../../../../warpx/Regression/Checksum/')

import checksumAPI

# this will be the name of the plot file
fn = sys.argv[1]
test_name = os.path.split(os.getcwd())[1]

my_check = checksumAPI.evaluate_checksum(test_name, fn, do_particles=True)

ref_density = np.array([
    1.27964961e+14, 2.23557428e+14, 2.55373040e+14, 2.55662477e+14,
    2.55812691e+14, 2.55813239e+14, 2.55811866e+14, 2.55786269e+14,
    2.56082119e+14, 2.56292282e+14, 2.56023913e+14, 2.55834239e+14,
    2.55907323e+14, 2.55982609e+14, 2.56059539e+14, 2.56106553e+14,
    2.56182954e+14, 2.56223521e+14, 2.56172369e+14, 2.56635659e+14,
    2.57186929e+14, 2.57130988e+14, 2.56752721e+14, 2.56422102e+14,
    2.56374614e+14, 2.56313410e+14, 2.56155040e+14, 2.56161267e+14,
    2.56487439e+14, 2.56703956e+14, 2.56508058e+14, 2.56381562e+14,
    2.56342893e+14, 2.56150528e+14, 2.55979914e+14, 2.56024160e+14,
    2.56073483e+14, 2.56125084e+14, 2.56225296e+14, 2.56166376e+14,
    2.56101586e+14, 2.56201262e+14, 2.56219550e+14, 2.56328349e+14,
    2.56661497e+14, 2.56692124e+14, 2.56318645e+14, 2.56081678e+14,
    2.56328139e+14, 2.56588933e+14, 2.56618328e+14, 2.56606005e+14,
    2.56469298e+14, 2.56253850e+14, 2.56187604e+14, 2.56104054e+14,
    2.55952320e+14, 2.56022357e+14, 2.56216249e+14, 2.56335819e+14,
    2.56407500e+14, 2.56478832e+14, 2.56332887e+14, 2.56232650e+14,
    2.56366557e+14, 2.56272022e+14, 2.56364171e+14, 2.56905656e+14,
    2.57312294e+14, 2.57113075e+14, 2.56585870e+14, 2.56586186e+14,
    2.56763807e+14, 2.56398917e+14, 2.56155059e+14, 2.56325185e+14,
    2.56360971e+14, 2.56497772e+14, 2.56697282e+14, 2.56574163e+14,
    2.56489649e+14, 2.56599643e+14, 2.56560301e+14, 2.56415243e+14,
    2.56362205e+14, 2.56214975e+14, 2.56194984e+14, 2.56555332e+14,
    2.56659947e+14, 2.56321532e+14, 2.56219048e+14, 2.56336088e+14,
    2.56357104e+14, 2.56429674e+14, 2.56485999e+14, 2.56388110e+14,
    2.56307505e+14, 2.56579563e+14, 2.56884946e+14, 2.56538015e+14,
    2.56287747e+14, 2.56599838e+14, 2.56694298e+14, 2.56634147e+14,
    2.56567453e+14, 2.56499896e+14, 2.56753381e+14, 2.57044598e+14,
    2.56732807e+14, 2.56173137e+14, 2.56213975e+14, 2.56443981e+14,
    2.56247421e+14, 2.56041834e+14, 2.56401367e+14, 2.56777651e+14,
    2.56476777e+14, 2.56201270e+14, 2.56477386e+14, 2.56741103e+14,
    2.56623888e+14, 2.56548344e+14, 2.56589375e+14, 2.56485188e+14,
    2.56336432e+14, 2.56262489e+14, 2.56544595e+14, 2.24585365e+14,
    1.28034633e+14
])

density_data = np.load( 'ion_density_case_1.npy' )
print(repr(density_data))
assert np.allclose(density_data, ref_density)
