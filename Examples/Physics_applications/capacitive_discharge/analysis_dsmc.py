#!/usr/bin/env python3

# 2023 TAE Technologies

import os
import sys

import numpy as np

sys.path.append("../../../../warpx/Regression/Checksum/")

import checksumAPI

# this will be the name of the plot file
fn = sys.argv[1]
test_name = os.path.split(os.getcwd())[1]

my_check = checksumAPI.evaluate_checksum(test_name, fn, do_particles=True)

ref_density = np.array(
    [
        1.27942709e14,
        2.23579371e14,
        2.55384387e14,
        2.55660663e14,
        2.55830911e14,
        2.55814337e14,
        2.55798906e14,
        2.55744891e14,
        2.55915585e14,
        2.56083194e14,
        2.55942354e14,
        2.55833026e14,
        2.56036175e14,
        2.56234141e14,
        2.56196179e14,
        2.56146141e14,
        2.56168022e14,
        2.56216909e14,
        2.56119961e14,
        2.56065167e14,
        2.56194764e14,
        2.56416398e14,
        2.56465239e14,
        2.56234337e14,
        2.56234503e14,
        2.56316003e14,
        2.56175023e14,
        2.56030269e14,
        2.56189301e14,
        2.56286379e14,
        2.56130396e14,
        2.56295225e14,
        2.56474082e14,
        2.56340375e14,
        2.56350864e14,
        2.56462330e14,
        2.56469391e14,
        2.56412726e14,
        2.56241788e14,
        2.56355650e14,
        2.56650599e14,
        2.56674748e14,
        2.56642480e14,
        2.56823508e14,
        2.57025029e14,
        2.57110614e14,
        2.57042364e14,
        2.56950884e14,
        2.57051822e14,
        2.56952148e14,
        2.56684016e14,
        2.56481130e14,
        2.56277073e14,
        2.56065774e14,
        2.56190033e14,
        2.56411074e14,
        2.56202418e14,
        2.56128368e14,
        2.56227002e14,
        2.56083004e14,
        2.56056768e14,
        2.56343831e14,
        2.56443659e14,
        2.56280541e14,
        2.56191572e14,
        2.56147304e14,
        2.56342794e14,
        2.56735473e14,
        2.56994680e14,
        2.56901500e14,
        2.56527131e14,
        2.56490824e14,
        2.56614730e14,
        2.56382744e14,
        2.56588214e14,
        2.57160270e14,
        2.57230435e14,
        2.57116530e14,
        2.57065771e14,
        2.57236507e14,
        2.57112865e14,
        2.56540177e14,
        2.56416828e14,
        2.56648954e14,
        2.56625594e14,
        2.56411003e14,
        2.56523754e14,
        2.56841108e14,
        2.56856368e14,
        2.56757912e14,
        2.56895134e14,
        2.57144419e14,
        2.57001944e14,
        2.56371759e14,
        2.56179404e14,
        2.56541905e14,
        2.56715727e14,
        2.56851681e14,
        2.57114458e14,
        2.57001739e14,
        2.56825690e14,
        2.56879682e14,
        2.56699673e14,
        2.56532841e14,
        2.56479582e14,
        2.56630989e14,
        2.56885996e14,
        2.56694637e14,
        2.56250819e14,
        2.56045278e14,
        2.56366075e14,
        2.56693733e14,
        2.56618530e14,
        2.56580918e14,
        2.56812781e14,
        2.56754216e14,
        2.56444736e14,
        2.56473391e14,
        2.56538398e14,
        2.56626551e14,
        2.56471950e14,
        2.56274969e14,
        2.56489423e14,
        2.56645266e14,
        2.56611124e14,
        2.56344324e14,
        2.56244156e14,
        2.24183727e14,
        1.27909856e14,
    ]
)

density_data = np.load("ion_density_case_1.npy")
print(repr(density_data))
assert np.allclose(density_data, ref_density)
