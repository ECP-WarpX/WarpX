#!/usr/bin/env python3

# 2023 TAE Technologies

import os
import sys

import numpy as np

sys.path.append('../../../../warpx/Regression/Checksum/')

import checksumAPI

# this will be the name of the plot file
fn = sys.argv[1]
test_name = os.path.split(os.getcwd())[1]

my_check = checksumAPI.evaluate_checksum(test_name, fn, do_particles=True)

ref_density = np.array([
    1.27955912e+14, 2.23560752e+14, 2.55374706e+14, 2.55654635e+14,
    2.55817176e+14, 2.55819792e+14, 2.55808071e+14, 2.55749792e+14,
    2.55917100e+14, 2.56100588e+14, 2.56087869e+14, 2.56056312e+14,
    2.56007600e+14, 2.56009523e+14, 2.56241071e+14, 2.56522286e+14,
    2.56780402e+14, 2.56890975e+14, 2.56438974e+14, 2.56169434e+14,
    2.56481517e+14, 2.56646442e+14, 2.56315418e+14, 2.56008986e+14,
    2.56137344e+14, 2.56176003e+14, 2.56134482e+14, 2.56229286e+14,
    2.56385743e+14, 2.56511288e+14, 2.56579561e+14, 2.56573709e+14,
    2.56374237e+14, 2.56120157e+14, 2.55964204e+14, 2.55996815e+14,
    2.56146198e+14, 2.56203886e+14, 2.56058975e+14, 2.56013076e+14,
    2.56492579e+14, 2.57064232e+14, 2.56847388e+14, 2.56325086e+14,
    2.56208859e+14, 2.56182336e+14, 2.56168145e+14, 2.56303838e+14,
    2.56352980e+14, 2.56256292e+14, 2.56370087e+14, 2.56540112e+14,
    2.56425211e+14, 2.56218881e+14, 2.56221388e+14, 2.56268182e+14,
    2.56353638e+14, 2.56595612e+14, 2.56650507e+14, 2.56596893e+14,
    2.56764518e+14, 2.56767417e+14, 2.56252135e+14, 2.55965838e+14,
    2.56373448e+14, 2.56645756e+14, 2.56601551e+14, 2.56597844e+14,
    2.56446870e+14, 2.56391390e+14, 2.56975168e+14, 2.57450358e+14,
    2.57077744e+14, 2.56676487e+14, 2.56671141e+14, 2.56718927e+14,
    2.56650713e+14, 2.56488214e+14, 2.56181643e+14, 2.56040734e+14,
    2.56325437e+14, 2.56583305e+14, 2.56453716e+14, 2.56284275e+14,
    2.56511868e+14, 2.56729295e+14, 2.56724771e+14, 2.56890048e+14,
    2.57008676e+14, 2.56880502e+14, 2.56762675e+14, 2.56622499e+14,
    2.56728696e+14, 2.56981677e+14, 2.56707305e+14, 2.56403139e+14,
    2.56589917e+14, 2.56815129e+14, 2.56719048e+14, 2.56322480e+14,
    2.56161560e+14, 2.56589473e+14, 2.56975844e+14, 2.56891644e+14,
    2.56558492e+14, 2.56459187e+14, 2.56657768e+14, 2.57031406e+14,
    2.57455571e+14, 2.57131959e+14, 2.56511539e+14, 2.56505579e+14,
    2.56753391e+14, 2.56732754e+14, 2.56672149e+14, 2.56680855e+14,
    2.56523455e+14, 2.56551892e+14, 2.56582171e+14, 2.56354079e+14,
    2.56163392e+14, 2.56413033e+14, 2.56764846e+14, 2.56619282e+14,
    2.56425317e+14, 2.56287231e+14, 2.56076278e+14, 2.23817023e+14,
    1.27643844e+14
])

density_data = np.load( 'ion_density_case_1.npy' )
print(repr(density_data))
assert np.allclose(density_data, ref_density)
