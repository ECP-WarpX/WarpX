# Maximum number of time steps
max_step = 80

# number of grid points
amr.n_cell =   64  128

# Maximum allowable size of each subdomain in the problem domain;
#    this is used to decompose the domain for parallel calculations.
amr.max_grid_size = 64

# Maximum level in hierarchy (for now must be 0, i.e., one level in total)
amr.max_level = 0

# Geometry
geometry.coord_sys   = 1                  # 0: Cartesian
geometry.prob_lo     =   0.e-6   -20.e-6    # physical domain
geometry.prob_hi     =  20.e-6    20.e-6
boundary.field_lo = none periodic
boundary.field_hi = none periodic

warpx.serialize_ics = 1

# Verbosity
warpx.verbose = 1

# Algorithms
warpx.do_pml = 0
algo.field_gathering = energy-conserving
algo.current_deposition = esirkepov

# Order of particle shape factors
algo.particle_shape = 1

# CFL
warpx.cfl = 1.0

# Having this turned on makes for a more sensitive test
warpx.do_dive_cleaning = 1

# Parameters for the plasma wave
my_constants.epsilon = 0.01
my_constants.n0 = 2.e24  # electron density, #/m^3
my_constants.wp = sqrt(n0*q_e**2/(epsilon0*m_e))  # plasma frequency
my_constants.kp = wp/clight  # plasma wavenumber
my_constants.k0 = 2.*pi/20.e-6  # longitudianl perturbation wavenumber
my_constants.w0 = 5.e-6  # transverse perturbation length
# Note: kp is calculated in SI for a density of 2e24
# k0 is calculated so as to have 2 periods within the 40e-6 wide box.

# Particles
particles.species_names = electrons ions

electrons.charge = -q_e
electrons.mass = m_e
electrons.injection_style = "NUniformPerCell"
electrons.num_particles_per_cell_each_dim = 2 2 2
electrons.xmin =   0.e-6
electrons.xmax =  18.e-6
electrons.zmin = -20.e-6
electrons.zmax = +20.e-6

electrons.profile = constant
electrons.density = n0   # number of electrons per m^3
electrons.momentum_distribution_type = parse_momentum_function
electrons.momentum_function_ux(x,y,z) = "epsilon/kp*2*x/w0**2*exp(-(x**2+y**2)/w0**2)*sin(k0*z)"
electrons.momentum_function_uy(x,y,z) = "epsilon/kp*2*y/w0**2*exp(-(x**2+y**2)/w0**2)*sin(k0*z)"
electrons.momentum_function_uz(x,y,z) = "-epsilon/kp*k0*exp(-(x**2+y**2)/w0**2)*cos(k0*z)"


ions.charge = q_e
ions.mass = m_p
ions.injection_style = "NUniformPerCell"
ions.num_particles_per_cell_each_dim = 2 2 2
ions.xmin =   0.e-6
ions.xmax =  18.e-6
ions.zmin = -20.e-6
ions.zmax = +20.e-6

ions.profile = constant
ions.density = n0   # number of ions per m^3
ions.momentum_distribution_type = constant
ions.ux = 0.
ions.uy = 0.
ions.uz = 0.

# Diagnostics
diagnostics.diags_names = diag1 diag_parser_filter diag_uniform_filter diag_random_filter
diag1.intervals = 40
diag1.diag_type = Full
diag1.fields_to_plot = jx jz Ex Ez By

## diag_parser_filter is a diag used to test the particle filter function.
diag_parser_filter.intervals = 80:80:
diag_parser_filter.diag_type = Full
diag_parser_filter.species = electrons
diag_parser_filter.electrons.plot_filter_function(t,x,y,z,ux,uy,uz) = "(uy-uz < 0) *
                                                                 (sqrt(x**2+y**2)<10e-6) * (z > 0)"

## diag_uniform_filter is a diag used to test the particle uniform filter.
diag_uniform_filter.intervals = 80:80:
diag_uniform_filter.diag_type = Full
diag_uniform_filter.species = electrons
diag_uniform_filter.electrons.uniform_stride = 3

## diag_random_filter is a diag used to test the particle random filter.
diag_random_filter.intervals = 80:80:
diag_random_filter.diag_type = Full
diag_random_filter.species = electrons
diag_random_filter.electrons.random_fraction = 0.66
