/* Copyright 2023 David Grote
 *
 *
 * This file is part of WarpX.
 *
 * License: BSD-3-Clause-LBNL
 */
#ifndef PARMPARSEWITHOPTIONALGROUP_H_
#define PARMPARSEWITHOPTIONALGROUP_H_

#include <AMReX_REAL.H>
#include <AMReX_Vector.H>
#include <AMReX_ParmParse.H>

#include <string>

struct ParmParseWithOptionalGroup
{
    std::string prefix;
    std::string group;
    std::string prefix_dot_group;

    /* \brief
     * This class wraps around ParmParse and allows querying input parameters
     * with an optional group name.
     * For example, with the base name of "input" and group name of "group",
     * when querying an input name called "variable", this will first check
     * for the input parameter "input.group.variable", and if that is not found,
     * it will check for "input.variable".
     * The group can be an empty string, in which case it will
     * always search for "input.variable".
     *
     * \param[in] a_prefix The base input parameter prefix
     * \param[in] a_group The optional group name in the input parameters
     */
    ParmParseWithOptionalGroup(std::string const& a_prefix, std::string const& a_group);

    /* Note that this follows the code pattern of ParmParse and writes out
     * each version of the routine rather than using templates */
    bool queryWithParser (const char* name, bool& ref) const;
    bool queryWithParser (const char* name, int& ref) const;
    bool queryWithParser (const char* name, double& ref) const;
    bool queryWithParser (const char* name, float& ref) const;
    bool query (const char* name, std::string& ref) const;

    void getWithParser (const char* name, int& ref) const;
    void getWithParser (const char* name, long& ref) const;
    void getWithParser (const char* name, double& ref) const;
    void getWithParser (const char* name, float& ref) const;
    void get (const char* name, std::string& ref) const;
    void getArrWithParser (const char* name, amrex::Vector<double>& ref) const;
    void getArrWithParser (const char* name, amrex::Vector<float>& ref) const;
    void getArrWithParser (const char* name, amrex::Vector<int>& ref, int start_ix, int num_val) const;
    void getArrWithParser (const char* name, amrex::Vector<double>& ref, int start_ix, int num_val) const;
    void getArrWithParser (const char* name, amrex::Vector<float>& ref, int start_ix, int num_val) const;

    void get_long_string (const char* name, std::string& ref) const;

private:

    const amrex::ParmParse SelectParmParse(const char *name) const;

};

#endif
