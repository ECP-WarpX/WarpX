# -*- mode: yaml -*-

pool:
  vmImage: 'ubuntu-20.04'

pr:
  autoCancel: true
  drafts: false

jobs:
- job:
  # FIXME remove unused variables
  variables:
    BLASPP_HOME: '/usr/local'
    CEI_SUDO: 'sudo'
    CEI_TMP: '/tmp/cei'
    CMAKE_GENERATOR: 'Ninja'
    FFTW_HOME: '/usr'
    LAPACKPP_HOME: '/usr/local'
    #OMP_NUM_THREADS: 1
    WARPX_CI_CCACHE: 'TRUE'
    #WARPX_CI_NUM_MAKE_JOBS: 2
    #WARPX_CI_OPENPMD: 'TRUE'
    #WARPX_CI_TMP: '/tmp/ci'

  strategy:
    # FIXME uncomment all variants
    matrix:
      # Cartesian 1D
      cartesian_1d:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=1 -DWarpX_FFT=ON -DWarpX_PYTHON=ON
      # Cartesian 2D
      cartesian_2d:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=2 -DWarpX_FFT=ON -DWarpX_PYTHON=ON
      # Cartesian 3D
      cartesian_3d:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=3 -DWarpX_FFT=ON -DWarpX_PYTHON=ON
      # Cylindrical RZ
      cylindrical_rz:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=RZ -DWarpX_FFT=ON -DWarpX_PYTHON=ON
        WARPX_RZ_FFT: 'TRUE'
      # embedded boundaries
      embedded_boundaries:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS='1;2;3;RZ' -DWarpX_FFT=ON -DWarpX_PYTHON=ON -DWarpX_EB=ON
        WARPX_RZ_FFT: 'TRUE'
      #single_precision:
      #  WARPX_CMAKE_FLAGS: -DWarpX_DIMS='1;2;3;RZ' -DWarpX_FFT=ON -DWarpX_PRECISION=SINGLE
      #  WARPX_RZ_FFT: 'TRUE'

  # default: 60; maximum: 360
  timeoutInMinutes: 240

  steps:
  # set up caches:
  # - once stored under a key, they become immutable (even if cache content changes)
  # - for a refresh the key has to change, e.g., hash of a tracked file in the key
  - task: Cache@2
    continueOnError: true
    inputs:
      key: 'Ccache | "$(System.JobName)" | .azure-pipelines.yml | cmake/dependencies/AMReX.cmake'
      restoreKeys: |
         Ccache | "$(System.JobName)" | .azure-pipelines.yml | cmake/dependencies/AMReX.cmake
         Ccache | "$(System.JobName)" | .azure-pipelines.yml
      path: /home/vsts/.ccache
      cacheHitVar: CCACHE_CACHE_RESTORED
    displayName: Cache Ccache Objects

  - task: Cache@2
    continueOnError: true
    inputs:
      key: 'Python3 | "$(System.JobName)" | .azure-pipelines.yml'
      restoreKeys: |
         Python3 | "$(System.JobName)" | .azure-pipelines.yml
      path: /home/vsts/.local/lib/python3.8
      cacheHitVar: PYTHON38_CACHE_RESTORED
    displayName: Cache Python Libraries

  - bash: |
      set -eu -o pipefail
      cat /proc/cpuinfo | grep "model name" | sort -u
      df -h
      echo 'Acquire::Retries "3";' | sudo tee /etc/apt/apt.conf.d/80-retries
      sudo apt update
      sudo apt install -y ccache curl gcc gfortran git g++ ninja-build \
        openmpi-bin libopenmpi-dev \
        libfftw3-dev libfftw3-mpi-dev libhdf5-openmpi-dev pkg-config make \
        python3 python3-pandas python3-pip python3-venv python3-setuptools libblas-dev liblapack-dev
      ccache --set-config=max_size=10.0G
      python3 -m pip install --upgrade pip
      python3 -m pip install --upgrade build
      python3 -m pip install --upgrade packaging
      python3 -m pip install --upgrade setuptools
      python3 -m pip install --upgrade wheel
      python3 -m pip install --upgrade virtualenv
      python3 -m pip install --upgrade pipx
      python3 -m pipx install cmake
      python3 -m pipx ensurepath
      export PATH="$HOME/.local/bin:$PATH"
      sudo curl -L -o /usr/local/bin/cmake-easyinstall https://raw.githubusercontent.com/ax3l/cmake-easyinstall/main/cmake-easyinstall
      sudo chmod a+x /usr/local/bin/cmake-easyinstall
      #if [ "${WARPX_CI_OPENPMD:-FALSE}" == "TRUE" ]; then
      #  cmake-easyinstall --prefix=/usr/local                   \
      #    git+https://github.com/openPMD/openPMD-api.git@0.14.3 \
      #    -DCMAKE_CXX_COMPILER_LAUNCHER=$(which ccache)         \
      #    -DCMAKE_VERBOSE_MAKEFILE=ON                           \
      #    -DopenPMD_USE_PYTHON=OFF -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF -DBUILD_CLI_TOOLS=OFF
      #  python3 -m pip install --upgrade openpmd-api
      #fi
      if [ "${WARPX_RZ_FFT:-FALSE}" == "TRUE" ]; then
        # BLAS++
        cmake-easyinstall --prefix=/usr/local           \
          git+https://github.com/icl-utk-edu/blaspp.git \
          -DCMAKE_CXX_COMPILER_LAUNCHER=$(which ccache) \
          -DCMAKE_CXX_STANDARD=17                       \
          -Duse_openmp=OFF -Dbuild_tests=OFF -DCMAKE_VERBOSE_MAKEFILE=ON
        # LAPACK++
        cmake-easyinstall --prefix=/usr/local             \
          git+https://github.com/icl-utk-edu/lapackpp.git \
          -DCMAKE_CXX_COMPILER_LAUNCHER=$(which ccache)   \
          -DCMAKE_CXX_STANDARD=17                         \
          -Duse_cmake_find_lapack=ON -Dbuild_tests=OFF -DCMAKE_VERBOSE_MAKEFILE=ON
      fi
      if [[ "${WARPX_CI_REGULAR_CARTESIAN_3D:-FALSE}" == "TRUE" ]]; then
        cmake-easyinstall --prefix=/usr/local git+https://github.com/icl-utk-edu/heffte.git@v2.4.0 \
          -DCMAKE_CXX_COMPILER_LAUNCHER=$(which ccache)          \
          -DCMAKE_CXX_STANDARD=17 -DHeffte_ENABLE_DOXYGEN=OFF    \
          -DHeffte_ENABLE_FFTW=ON -DHeffte_ENABLE_TESTING=OFF    \
          -DHeffte_ENABLE_CUDA=OFF -DHeffte_ENABLE_ROCM=OFF      \
          -DHeffte_ENABLE_ONEAPI=OFF -DHeffte_ENABLE_MKL=OFF     \
          -DHeffte_ENABLE_PYTHON=OFF -DHeffte_ENABLE_FORTRAN=OFF \
          -DHeffte_ENABLE_MAGMA=OFF                              \
          -DCMAKE_VERBOSE_MAKEFILE=ON
      fi
      # Python modules required for test analysis
      python3 -m pip install --upgrade -r Regression/requirements.txt
      python3 -m pip cache purge
      # external repositories required for test analysis
      cd ..
      git clone --depth 1 https://github.com/ECP-WarpX/warpx-data.git
      # FIXME do we want to select only specific datasets?
      git clone --depth 1 https://github.com/openPMD/openPMD-example-datasets.git
      cd -
      rm -rf ${CEI_TMP}
      df -h
    displayName: 'Install dependencies'

  - bash: |
      # FIXME remove unused variables/commands
      set -eu -o pipefail
      df -h
      # configure
      export AMReX_CMAKE_FLAGS="-DAMReX_ASSERTIONS=ON -DAMReX_TESTING=ON"
      cmake -S . -B build ${AMReX_CMAKE_FLAGS} ${WARPX_CMAKE_FLAGS} -DWarpX_CI=ON
      # build
      cmake --build build -j 2
      # run tests (exclude pytest.AMReX when running Python tests)
      # FIXME debug
      ctest --test-dir build --output-on-failure -E AMReX -R lasy --verbose
      #ctest --test-dir build --output-on-failure -E AMReX
      rm -rf build
      #rm -rf ${WARPX_CI_TMP}
      df -h
    displayName: 'Build & test'
