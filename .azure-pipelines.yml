# -*- mode: yaml -*-

pool:
  vmImage: 'ubuntu-22.04'

trigger:
  branches:
    include:
    - development
pr:
  autoCancel: true
  drafts: false
  paths:
    exclude:
    - Docs

jobs:
- job:
  variables:
    # TODO: fpe_trap_invalid broken in HDF5 1.14.3
    #       Remove "-DWarpX_TEST_FPETRAP_ARGS=..." once 1.14.4 is available.
    #       https://github.com/HDFGroup/hdf5/issues/4801
    #       https://github.com/conda-forge/hdf5-feedstock/pull/231
    AMREX_CMAKE_FLAGS: -DAMReX_ASSERTIONS=ON -DAMReX_TESTING=ON -DpyAMReX_IPO=OFF -DWarpX_TEST_FPETRAP_ARGS=amrex.fpe_trap_overflow=1 amrex.fpe_trap_zero=1"
    CMAKE_BUILD_PARALLEL_LEVEL: 2
    CMAKE_GENERATOR: Ninja
    CXXFLAGS: -Wno-array-bounds  # many false positives in g++ 12
  strategy:
    matrix:
      cartesian_1d:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=1
      cartesian_2d:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=2
      cartesian_3d:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=3
      cylindrical_rz:
        WARPX_CMAKE_FLAGS: -DWarpX_DIMS=RZ
      #single_precision:  # TODO: will be reintroduced systematically at a later point
      #  WARPX_CMAKE_FLAGS: -DWarpX_DIMS='1;2;3;RZ' -DWarpX_PRECISION=SINGLE

  # default: 60; maximum: 360
  timeoutInMinutes: 240

  steps:
  # set up caches:
  # - once stored under a key, they become immutable (even if cache content changes)
  # - for a refresh the key has to change, e.g., hash of a tracked file in the key
  - task: Cache@2
    continueOnError: true
    inputs:
      key: 'Ccache | "$(System.JobName)" | .azure-pipelines.yml | cmake/dependencies/AMReX.cmake'
      restoreKeys: |
         Ccache | "$(System.JobName)" | .azure-pipelines.yml | cmake/dependencies/AMReX.cmake
         Ccache | "$(System.JobName)" | .azure-pipelines.yml
      path: /home/vsts/.ccache
      cacheHitVar: CCACHE_CACHE_RESTORED
    displayName: Cache CCache Objects

  - bash: |
      set -eu -o pipefail
      cat /proc/cpuinfo | grep "model name" | sort -u
      df -h

      # Setup pixi for Azure Pipelines
      curl -fsSL https://pixi.sh/install.sh | bash
      export PATH=$HOME/.pixi/bin:$PATH
      echo "##vso[task.setvariable variable=PATH]$PATH"

      # configure in pyproject.toml [tool.pixi.dependencies]
      pixi install
      pixi list
    displayName: Install dependencies

  - bash: |
      set -eu -o pipefail

      # external repositories required for test analysis
      git clone --depth 1 https://github.com/ECP-WarpX/warpx-data.git \
        ../warpx-data
      # TODO select only specific datasets?
      git clone --depth 1 https://github.com/openPMD/openPMD-example-datasets.git \
        ../openPMD-example-datasets

      df -h
    displayName: Download test data

  - bash: |
      eval "$(pixi shell-hook)"
      set -eu -o pipefail

      # configure
      cmake -S . -B build             \
        ${AMREX_CMAKE_FLAGS}          \
        ${WARPX_CMAKE_FLAGS}          \
        -DWarpX_FFT=ON                \
        -DWarpX_HEFFTE=ON             \
        -DWarpX_openpmd_internal=OFF  \
        -DWarpX_pybind11_internal=OFF \
        -DWarpX_PYTHON=ON             \
        -DWarpX_PYTHON_IPO=OFF        \
        -DWarpX_TEST_CLEANUP=ON       \
        -DWarpX_TEST_FPETRAP=ON

      # build
      cmake --build build
    displayName: Build WarpX

  - bash: |
      eval "$(pixi shell-hook)"
      set -eu -o pipefail

      # run tests (exclude pytest.AMReX when running Python tests)
      ctest --test-dir build --output-on-failure -E AMReX

      df -h
    displayName: Test WarpX
