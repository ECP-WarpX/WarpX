name: üçè macOS

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-macos
  cancel-in-progress: true

jobs:
  build_appleclang:
    name: AppleClang
    runs-on: macos-latest
    if: github.event.pull_request.draft == false
    env:
      CXXFLAGS: "-Werror -Wno-error=pass-failed"
      # For macOS, Ninja is slower than the default:
      #CMAKE_GENERATOR: Ninja
      # setuptools/mp4py work-around, see
      #   https://github.com/mpi4py/mpi4py/pull/159
      #   https://github.com/mpi4py/mpi4py/issues/157#issuecomment-1001022274
      SETUPTOOLS_USE_DISTUTILS: stdlib
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: |
        set +e
        rm -rf /usr/local/bin/2to3
        brew update
        brew install ccache
        brew install fftw
        brew install libomp
        brew install ninja
        brew install open-mpi
        brew install pkg-config
        set -e
        brew tap openpmd/openpmd
        brew install openpmd-api
    - name: CCache Cache
      uses: actions/cache@v2
      # - once stored under a key, they become immutable (even if local cache path content changes)
      # - for a refresh the key has to change, e.g., hash of a tracked file in the key
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ccache-macos-appleclang-${{ hashFiles('.github/workflows/macos.yml') }}-${{ hashFiles('cmake/dependencies/AMReX.cmake') }}
        restore-keys: |
          ccache-macos-appleclang-${{ hashFiles('.github/workflows/macos.yml') }}-
          ccache-macos-appleclang-
    - name: build WarpX
      run: |
        cmake -S . -B build_dp         \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_EB=ON                \
          -DWarpX_OPENPMD=ON           \
          -DWarpX_openpmd_internal=OFF
        cmake --build build_dp -j 2

        cmake -S . -B build_sp         \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_EB=ON                \
          -DWarpX_LIB=ON               \
          -DWarpX_OPENPMD=ON           \
          -DWarpX_openpmd_internal=OFF \
          -DWarpX_PRECISION=SINGLE
        cmake --build build_sp -j 2

        python3 -m pip install --upgrade pip setuptools wheel
        export WARPX_MPI=ON
        PYWARPX_LIB_DIR=$PWD/build_sp/lib python3 -m pip wheel .
        python3 -m pip install *.whl

    - name: run pywarpx
      run: |
        export OMP_NUM_THREADS=1
        mpirun -n 2 Examples/Physics_applications/laser_acceleration/PICMI_inputs_3d.py
