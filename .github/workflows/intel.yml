name: üêß Intel

on: [push, pull_request]

jobs:
# Ref.: https://github.com/rscohn2/oneapi-ci
# intel-basekit intel-hpckit are too large in size
  build_icc:
    name: oneAPI ICC SP&DP
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -qqq update
        sudo apt-get install -y wget build-essential pkg-config cmake ca-certificates gnupg
        sudo wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        sudo curl -L -o /usr/local/bin/cmake-easyinstall https://git.io/JvLxY
        sudo chmod a+x /usr/local/bin/cmake-easyinstall
        export CEI_SUDO="sudo"
        CXX=$(which icpc) CC=$(which icc) cmake-easyinstall --prefix=/usr/local git+https://github.com/openPMD/openPMD-api.git@0.13.2 -DopenPMD_USE_PYTHON=OFF -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF -DBUILD_CLI_TOOLS=OFF
    - name: build WarpX
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        export CXX=$(which icpc)
        export CC=$(which icc)

        cmake -S . -B build_dp \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DWarpX_LIB=ON              \
          -DWarpX_MPI=OFF             \
          -DWarpX_OPENPMD=ON          \
          -DWarpX_openpmd_internal=OFF
        cmake --build build_dp -j 2

        cmake -S . -B build_sp \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_LIB=ON               \
          -DWarpX_MPI=OFF              \
          -DWarpX_OPENPMD=ON           \
          -DWarpX_openpmd_internal=OFF \
          -DWarpX_PRECISION=SINGLE
        cmake --build build_sp -j 2

        python3 -m pip install --upgrade pip setuptools wheel
        PYWARPX_LIB_DIR=$PWD/build_sp/lib python3 -m pip install -v .

  build_icpx:
    name: oneAPI ICX SP
    runs-on: ubuntu-20.04
    env: {CXXFLAGS: "-Werror -Wno-error=pass-failed"}
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      shell: bash
      run: |
        .github/workflows/dependencies/dpcpp.sh
    - name: build WarpX
      shell: bash
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        export CXX=$(which icpx)
        export CC=$(which icx)

        cmake -S . -B build_sp         \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_LIB=ON               \
          -DWarpX_MPI=OFF              \
          -DWarpX_OPENPMD=ON           \
          -DWarpX_PRECISION=SINGLE
        cmake --build build_sp -j 2

        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade setuptools wheel
        PYWARPX_LIB_DIR=$PWD/build_sp/lib python3 -m pip wheel -v .
        python3 -m pip install *.whl

    - name: run pywarpx
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        export OMP_NUM_THREADS=2
        Examples/Physics_applications/laser_acceleration/PICMI_inputs_laser_acceleration.py

  build_dpcc:
    name: oneAPI DPC++ SP
    runs-on: ubuntu-20.04
    env: {CXXFLAGS: "-Werror"}
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      shell: bash
      run: |
        .github/workflows/dependencies/dpcpp.sh
    - name: build WarpX
      shell: bash
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        export CXX=$(which dpcpp)
        export CC=$(which clang)

        cmake -S . -B build_sp         \
          -DBUILD_SHARED_LIBS=ON       \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_COMPUTE=SYCL         \
          -DWarpX_LIB=ON               \
          -DWarpX_MPI=OFF              \
          -DWarpX_OPENPMD=ON           \
          -DWarpX_PRECISION=SINGLE
        cmake --build build_sp -j 2

     # Skip this as it will copy the binary artifacts and we are tight on disk space
     #   python3 -m pip install --upgrade pip
     #   python3 -m pip install --upgrade setuptools wheel
     #   PYWARPX_LIB_DIR=$PWD/build_sp/lib python3 -m pip wheel .
     #   python3 -m pip install *.whl
