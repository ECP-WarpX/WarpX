name: Ubuntu build

on: [push, pull_request]

jobs:
# Ref.:
#   https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/ubuntu18.04/10.1/base/Dockerfile
#   https://github.com/ComputationalRadiationPhysics/picongpu/blob/0.5.0/share/picongpu/dockerfiles/ubuntu-1604/Dockerfile
#   https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/
  build_nvcc:
    name: NVCC 11.0.2 SP [Linux]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -qqq update
        sudo apt-get install -y build-essential ca-certificates cmake gnupg libopenmpi-dev openmpi-bin pkg-config wget
        sudo wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
        sudo apt-key add 7fa2af80.pub
        echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
        sudo apt-get update
        sudo apt-get install -y cuda-command-line-tools-11-0 cuda-compiler-11-0 cuda-cupti-dev-11-0 cuda-minimal-build-11-0 cuda-nvml-dev-11-0 cuda-nvtx-11-0 libcurand-dev-11-0
        sudo ln -s cuda-11.0 /usr/local/cuda
        sudo curl -L -o /usr/local/bin/cmake-easyinstall https://git.io/JvLxY
        sudo chmod a+x /usr/local/bin/cmake-easyinstall
        export CEI_SUDO="sudo"
        cmake-easyinstall --prefix=/usr/local git+https://github.com/openPMD/openPMD-api.git -DopenPMD_USE_PYTHON=OFF -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF
    - name: build WarpX
      run: |
        export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
        export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
        which nvcc || echo "nvcc not in PATH!"

        mkdir build_sp && cd build_sp
        cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DWarpX_COMPUTE=CUDA -DCUDA_ARCH=6.0 -DWarpX_OPENPMD=ON -DWarpX_openpmd_internal=OFF -DWarpX_PRECISION=single -DCUDA_ERROR_CAPTURE_THIS=ON
        make -j 2

# Ref.: https://github.com/rscohn2/oneapi-ci
# intel-basekit intel-hpckit are too large in size
  build_icc:
    name: oneAPI ICC SP&DP [Linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -qqq update
        sudo apt-get install -y wget build-essential pkg-config cmake ca-certificates gnupg
        sudo wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y intel-oneapi-dpcpp-cpp-compiler-pro
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        sudo curl -L -o /usr/local/bin/cmake-easyinstall https://git.io/JvLxY
        sudo chmod a+x /usr/local/bin/cmake-easyinstall
        export CEI_SUDO="sudo"
        CXX=$(which icpc) CC=$(which icc) cmake-easyinstall --prefix=/usr/local git+https://github.com/openPMD/openPMD-api.git -DopenPMD_USE_PYTHON=OFF -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF
    - name: build WarpX
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        export CXX=$(which icpc)
        export CC=$(which icc)

        mkdir build_dp && cd build_dp
        cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DWarpX_MPI=OFF -DWarpX_OPENPMD=ON -DWarpX_openpmd_internal=OFF
        make -j 2

        cd ..

        mkdir build_sp && cd build_sp
        cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DWarpX_MPI=OFF -DWarpX_OPENPMD=ON -DWarpX_openpmd_internal=OFF -DWarpX_PRECISION=single
        make -j 2

  build_dpcc:
    name: oneAPI DPC++ SP [Linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      shell: bash
      run: |
        set -ex
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -qqq update
        sudo apt-get install -y wget build-essential pkg-config ca-certificates gnupg
        python -m pip install --upgrade pip
        python -m pip install --upgrade cmake
        sudo wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install -y intel-oneapi-dpcpp-cpp-compiler intel-oneapi-mkl-devel
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        git clone https://github.com/openPMD/openPMD-api.git
        mkdir openPMD-api/build
        cd openPMD-api/build
        CXX=$(which dpcpp) CC=$(which clang) cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DopenPMD_USE_PYTHON=OFF -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF
        make -j 2
        sudo make install
    - name: build WarpX
      shell: bash
      run: |
        set +e
        source /opt/intel/oneapi/setvars.sh
        set -e
        export CXX=$(which dpcpp)
        export CC=$(which clang)

        mkdir build_sp && cd build_sp
        cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DWarpX_MPI=OFF -DWarpX_COMPUTE=DPCPP -DWarpX_OPENPMD=ON -DWarpX_openpmd_internal=OFF -DWarpX_PRECISION=single
        make -j 2

  build_hip:
    name: HIP SP [Linux]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      shell: bash
      run: .github/workflows/dependencies/hip.sh
    - name: build WarpX
      shell: bash
      run: |
        source /etc/profile.d/rocm.sh
        hipcc --version
        export CXX=$(which hipcc)
        export CC=$(which hipcc)

        mkdir build_sp && cd build_sp
        cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DWarpX_MPI=ON -DWarpX_COMPUTE=HIP -DAMD_ARCH=gfx900 -DWarpX_OPENPMD=ON -DWarpX_PRECISION=single
        make -j 2
