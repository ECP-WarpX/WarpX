name: üêß OpenMP

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-ubuntu
  cancel-in-progress: true

jobs:
  build_cxxminimal:
    name: GCC Minimal w/o MPI
    runs-on: ubuntu-20.04
    if: github.event.pull_request.draft == false
    env:
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      run: |
        .github/workflows/dependencies/gcc.sh
    - name: CCache Cache
      uses: actions/cache@v3
      # - once stored under a key, they become immutable (even if local cache path content changes)
      # - for a refresh the key has to change, e.g., hash of a tracked file in the key
      with:
        path: |
          ~/.ccache
          ~/.cache/ccache
        key: ccache-openmp-cxxminimal-${{ hashFiles('.github/workflows/ubuntu.yml') }}-${{ hashFiles('cmake/dependencies/AMReX.cmake') }}
        restore-keys: |
          ccache-openmp-cxxminimal-${{ hashFiles('.github/workflows/ubuntu.yml') }}-
          ccache-openmp-cxxminimal-
    - name: build WarpX
      run: |
        cmake -S . -B build            \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_DIMS="RZ;3"          \
          -DWarpX_EB=OFF               \
          -DWarpX_MPI=OFF              \
          -DWarpX_QED=OFF
        cmake --build build -j 2
        ./build/bin/warpx.3d Examples/Physics_applications/laser_acceleration/inputs_3d
        ./build/bin/warpx.rz Examples/Physics_applications/laser_acceleration/inputs_rz

  build_1D_2D:
    name: GCC 1D & 2D w/ MPI
    runs-on: ubuntu-22.04
    if: github.event.pull_request.draft == false
    env:
      CXXFLAGS: "-Werror"
      CXX: "g++-12"
      CC: "gcc-12"
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      run: |
        .github/workflows/dependencies/gcc12.sh
    - name: CCache Cache
      uses: actions/cache@v3
      # - once stored under a key, they become immutable (even if local cache path content changes)
      # - for a refresh the key has to change, e.g., hash of a tracked file in the key
      with:
        path: |
          ~/.ccache
          ~/.cache/ccache
        key: ccache-openmp-1D-2D-${{ hashFiles('.github/workflows/ubuntu.yml') }}-${{ hashFiles('cmake/dependencies/AMReX.cmake') }}
        restore-keys: |
          ccache-openmp-1D-2D-${{ hashFiles('.github/workflows/ubuntu.yml') }}-
          ccache-openmp-1D-2D-
    - name: build WarpX
      run: |
        cmake -S . -B build            \
          -GNinja                      \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_DIMS="1;2"           \
          -DWarpX_EB=OFF               \
          -DWarpX_PSATD=ON             \
          -DWarpX_QED_TABLE_GEN=ON
        cmake --build build -j 2
        ./build/bin/warpx.1d Examples/Physics_applications/laser_acceleration/inputs_1d
        ./build/bin/warpx.2d Examples/Physics_applications/laser_acceleration/inputs_2d

  build_gcc_ablastr:
    name: GCC ABLASTR w/o MPI
    runs-on: ubuntu-20.04
    if: github.event.pull_request.draft == false
    env:
      CMAKE_GENERATOR: Ninja
      CXXFLAGS: "-Werror"
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      run: |
        .github/workflows/dependencies/gcc.sh
        sudo apt-get install -y libopenmpi-dev openmpi-bin
    - name: CCache Cache
      uses: actions/cache@v3
      # - once stored under a key, they become immutable (even if local cache path content changes)
      # - for a refresh the key has to change, e.g., hash of a tracked file in the key
      with:
        path: |
          ~/.ccache
          ~/.cache/ccache
        key: ccache-openmp-gccablastr-${{ hashFiles('.github/workflows/ubuntu.yml') }}-${{ hashFiles('cmake/dependencies/AMReX.cmake') }}
        restore-keys: |
          ccache-openmp-gccablastr-${{ hashFiles('.github/workflows/ubuntu.yml') }}-
          ccache-openmp-gccablastr-
    - name: build WarpX
      run: |
        cmake -S . -B build            \
          -DCMAKE_VERBOSE_MAKEFILE=ON  \
          -DWarpX_APP=OFF              \
          -DWarpX_LIB=OFF
        cmake --build build -j 2

  build_pyfull:
    name: Clang pywarpx
    runs-on: ubuntu-20.04
    if: github.event.pull_request.draft == false
    env:
      # On CI for this test, Ninja is slower than the default:
      #CMAKE_GENERATOR: Ninja
      # setuptools/mp4py work-around, see
      #   https://github.com/mpi4py/mpi4py/pull/159
      #   https://github.com/mpi4py/mpi4py/issues/157#issuecomment-1001022274
      SETUPTOOLS_USE_DISTUTILS: stdlib
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      run: |
        .github/workflows/dependencies/pyfull.sh
    - name: CCache Cache
      uses: actions/cache@v3
      # - once stored under a key, they become immutable (even if local cache path content changes)
      # - for a refresh the key has to change, e.g., hash of a tracked file in the key
      with:
        path: |
          ~/.ccache
          ~/.cache/ccache
        key: ccache-openmp-pyfull-${{ hashFiles('.github/workflows/ubuntu.yml') }}-${{ hashFiles('cmake/dependencies/AMReX.cmake') }}
        restore-keys: |
          ccache-openmp-pyfull-${{ hashFiles('.github/workflows/ubuntu.yml') }}-
          ccache-openmp-pyfull-
    - name: build WarpX
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        export WARPX_MPI=ON
        export WARPX_OPENPMD=ON
        export WARPX_PSATD=ON
        export WARPX_QED_TABLE_GEN=ON
        export CC=$(which clang)
        export CXX=$(which clang++)
        export CXXFLAGS="-Werror -Wno-error=pass-failed"
        python3 -m pip install -v .

    - name: run pywarpx
      run: |
        export OMP_NUM_THREADS=1
        mpirun -n 2 Examples/Physics_applications/laser_acceleration/PICMI_inputs_3d.py

  build_qed_table_tools:
    name: Clang QED table tools
    runs-on: ubuntu-20.04
    if: github.event.pull_request.draft == false
    env:
      # On CI for this test, Ninja is slower than the default:
      #CMAKE_GENERATOR: Ninja
      # setuptools/mp4py work-around, see
      #   https://github.com/mpi4py/mpi4py/pull/159
      #   https://github.com/mpi4py/mpi4py/issues/157#issuecomment-1001022274
      SETUPTOOLS_USE_DISTUTILS: stdlib
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: |
        .github/workflows/dependencies/pyfull.sh
    - name: CCache Cache
      uses: actions/cache@v2
      # - once stored under a key, they become immutable (even if local cache path content changes)
      # - for a refresh the key has to change, e.g., hash of a tracked file in the key
      with:
        path: |
          ~/.ccache
          ~/.cache/ccache
        key: ccache-openmp-pyfull-${{ hashFiles('.github/workflows/ubuntu.yml') }}-${{ hashFiles('cmake/dependencies/AMReX.cmake') }}
        restore-keys: |
          ccache-openmp-pyfull-${{ hashFiles('.github/workflows/ubuntu.yml') }}-
          ccache-openmp-pyfull-
    - name: build WarpX & QED tools
      run: |
        export CC=$(which clang)
        export CXX=$(which clang++)
        export WARPX_MPI=ON
        export DWarpX_QED_TOOLS=ON
        export WARPX_QED_TABLE_GEN=ON
        cmake -S . -B build_qed
        cmake --build build_qed -j 6

    - name: run table_generator_tool
      run: |
        export OMP_NUM_THREADS=2
        ./build_qed/bin/qed_tools/qed_table_generator \
          --table BW --mode DP --dndt_chi_min 0.01 \
          --dndt_chi_max 100 --dndt_how_many 64 \
          --pair_chi_min 0.01 --pair_chi_max 100 \
          --pair_chi_how_many 64 --pair_frac_how_many 64 \
          -o bw_table_tool
        ./build_qed/bin/qed_tools/qed_table_generator \
          --table QS --mode DP --dndt_chi_min 0.001 \
          --dndt_chi_max 100 --dndt_how_many 64 \
          --em_chi_min 0.001 --em_chi_max 100 \
          --em_chi_how_many 64 --em_frac_how_many 64 \
          --em_frac_min 1e-12 -o qs_table_tool
        ./build_qed/bin/warpx \
          ./Examples/Modules/qed/quantum_synchrotron/inputs_3d \
          qed_bw.lookup_table_mode = "generate" \
          qed_bw.tab_dndt_chi_min = 0.01 \
          qed_bw.tab_dndt_chi_max = 100.0 \
          qed_bw.tab_dndt_how_many = 64 \
          qed_bw.tab_pair_chi_min = 0.01 \
          qed_bw.tab_pair_chi_max = 100.0 \
          qed_bw.tab_pair_chi_how_many = 64 \
          qed_bw.tab_pair_frac_how_many = 64 \
          qed_bw.save_table_in = "bw_table" \
          qed_qs.lookup_table_mode = "generate" \
          qed_qs.tab_dndt_chi_min = 0.001 \
          qed_qs.tab_dndt_chi_max = 100.0 \
          qed_qs.tab_dndt_how_many = 64 \
          qed_qs.tab_em_chi_min = 0.001 \
          qed_qs.tab_em_frac_min = 1.0e-12 \
          qed_qs.tab_em_chi_max = 100.0 \
          qed_qs.tab_em_chi_how_many = 64 \
          qed_qs.tab_em_frac_how_many = 64 \
          qed_qs.save_table_in = "qs_table"
        ./build_qed/bin/qed_tools/qed_table_reader -i qs_table --table QS --mode DP -o qs_table
        ./build_qed/bin/qed_tools/qed_table_reader -i qs_table_tool --table QS --mode DP -o qs_table_tool
        ./build_qed/bin/qed_tools/qed_table_reader -i bw_table --table BW --mode DP -o bw_table
        ./build_qed/bin/qed_tools/qed_table_reader -i bw_table_tool --table BW --mode DP -o bw_table_tool
        diff bw_table_dndt bw_table_tool_dndt
        diff bw_table_pair bw_table_tool_pair
        diff qs_table_phot_em qs_table_tool_phot_em
        diff qs_table_dndt qs_table_tool_dndt
        ./build_qed/bin/warpx \
          ./Examples/Modules/qed/quantum_synchrotron/inputs_3d \
          qed_bw.lookup_table_mode = "load" \
          qed_bw.load_table_from = "bw_table_tool" \
          qed_qs.lookup_table_mode = "load" \
          qed_qs.load_table_from = "qs_table_tool"
